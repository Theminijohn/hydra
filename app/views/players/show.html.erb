<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @player.name %>
</p>

<%= link_to 'Edit', edit_player_path(@player) %> |
<%= link_to 'Back', players_path %>

<script type="text/jsx">
  /** @jsx React.DOM */

  var InterfaceComponent = React.createClass({
    render: function(){
      return <div>Hello {this.props.name}! </div>
    }
  });

  React.renderComponent(
    <InterfaceComponent name="John",
    document.body
  );


</script>


<!--

The style attribute doesn’t accept strings. You can specify a JavaScript object
with keys that correspond to the camelCase CSS property names. We’ll see an
example of this shortly.

Events can be assigned (following the W3C specification) using attributes
like onClick and onChange.

the onChange event is triggered when the element’s value changes. This differs
from some browsers which need the element to blur before onChange is triggered.

 -->